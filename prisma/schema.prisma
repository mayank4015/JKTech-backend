generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Example base model with common fields
model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      String   @db.VarChar(50)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  documents     Document[]
  ingestions    Ingestion[]
  conversations Conversation[]
  savedQAs      SavedQA[]

  @@map("users")
}

model Document {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(500)
  description String?  @db.Text
  fileName    String   @db.VarChar(255) @map("file_name")
  fileUrl     String   @db.VarChar(1000) @map("file_url")
  fileType    String   @db.VarChar(100) @map("file_type")
  fileSize    BigInt   @map("file_size")
  uploadedBy  String   @db.Uuid @map("uploaded_by")
  status      String   @db.VarChar(50) @default("pending") // pending, processed, failed
  tags        String[] @default([])
  category    String?  @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  uploader   User        @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  ingestions Ingestion[]

  @@map("documents")
}

model Ingestion {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId   String    @db.Uuid @map("document_id")
  userId       String    @db.Uuid @map("user_id")
  status       String    @db.VarChar(50) @default("queued") // queued, processing, completed, failed
  progress     Int       @default(0) // 0-100
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")
  error        String?   @db.Text
  config       Json?     // Processing configuration
  logs         Json?     // Processing logs
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ingestions")
}

model Conversation {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String   @db.VarChar(500)
  userId       String   @db.Uuid @map("user_id")
  isBookmarked Boolean  @default(false) @map("is_bookmarked")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]

  @@map("conversations")
}

model Question {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String   @db.Uuid @map("conversation_id")
  text           String   @db.Text
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  answer       Answer?

  @@map("questions")
}

model Answer {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId String   @unique @db.Uuid @map("question_id")
  text       String   @db.Text
  confidence Float?   @default(0.0)
  sources    Json?    // Array of document sources with excerpts
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model SavedQA {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @db.Uuid @map("user_id")
  questionId String   @db.Uuid @map("question_id")
  answerId   String   @db.Uuid @map("answer_id")
  notes      String?  @db.Text
  tags       String[] @default([])
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, answerId])
  @@map("saved_qas")
}
